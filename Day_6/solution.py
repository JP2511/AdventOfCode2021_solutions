import functools as ft
import time


###############################################################################

def timer(function):
    """Times the time in miliseconds that it takes for a function to run given
    its inputs.

    Args:
        function: function to time.
    """
    def inner(*args):
        start = time.time()
        print(f"The solution is: {function(*args)}")
        print(f"It took {(time.time()-start)*(10**3)} miliseconds to execute.")
        print("#"*40)
    return inner


def read_file(filename: str) -> list:
    """Opens a file and converts its data to a list.

    Args:
        filename: name of the file to read its input.

    Returns:
        : time before the given lanternfish give birth.
    
    Requires:
        filename must the name of a valid file.
        numbers should be separated by commas.
    """

    with open(filename) as datafile:
        data = datafile.read().split(",")

    return [int(i) for i in data]


###############################################################################
# Part 1

@ft.lru_cache
def single_gen(life_span: int, time_left: int) -> int:
    """Counts the number of lanternfish generated by one individual plus that
    individual. When a lanternfish is born it 9 units of time before it is able
    to birth another individual, however, after its first child, it only needs
    7 time units before having any more children.

    Args:
        life_span: time before giving birth.
        time_left: number of generations left.

    Returns:
        count: number of individuals generated by a first individual and itself.
    """
    
    fst_child_time = time_left - life_span
    if fst_child_time < 1:
        return 1

    count = 1 + single_gen(9, fst_child_time)

    rest_child = (fst_child_time - 1) // 7

    for child in range(1, rest_child + 1):
        child_time_left = fst_child_time - 7*child
        
        if child_time_left > 0:
            count += single_gen(9, child_time_left) 
    
    return count


@timer
def generations(data, generations: int) -> int:
    """Counts the number of lanternfish after a certain number of generations.

    Args:
        data: times before the existing lanternfish give birth to a new 
            lanternfish
        generations: number of generations to occur before counting the number
            of lanternfish.

    Returns:
        : Number of lanternfish.
    """

    return sum([single_gen(life, generations) for life in data])


def part1(test_data, data):
    """Solves the first part of the problem for day 6.

    Args:
        test_data: small dataset provided to test the algorithm
        data: dataset used to solve part 1 of the problem
    """

    generations(test_data, 80)
    generations(data, 80)


###############################################################################
# Part 2

def part2(test_data, data):
    """Solves the second part of the problem for day 6.

    Args:
        test_data: small dataset provided to test the algorithm
        data: dataset used to solve part 2 of the problem
    """

    generations(test_data, 256)
    generations(data, 256)


###############################################################################

if __name__ == '__main__':
    test_data = read_file("test_input.txt")
    data = read_file("input.txt")

    print("Part 1 " + "-"*30)
    part1(test_data, data)
    print("\nPart 2 " + "-"*30)
    part2(test_data, data)